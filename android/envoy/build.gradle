apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    ndkVersion '27.0.12077973'

    defaultConfig {
        compileSdk 34
        minSdkVersion 21
        targetSdkVersion 34

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/kotlin',]
            jniLibs.srcDirs = ['../cronet']
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    namespace 'org.greatfire.envoy'
    buildFeatures {
        buildConfig true
    }
    compileSdk 35
}

dependencies {
    // resolves duplicate class error
    implementation(platform('org.jetbrains.kotlin:kotlin-bom:2.1.20'))
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.1.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'

    implementation('androidx.work:work-runtime-ktx:2.10.0')

    //testImplementation 'junit:junit:4.12'
    //androidTestImplementation 'androidx.test:runner:1.1.1'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.12.0'
//    implementation 'com.squareup.okhttp3:okhttp-dnsoverhttps:4.12.0'

    implementation 'androidx.core:core-ktx:1.16.0'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'

    // implementation 'org.greatfire.envoy:cronet:108.0.5359.195'
    //implementation 'org.greatfire.envoy:cronet:107.0.5304.150-1'
    // implementation 'org.greatfire:IEnvoyProxy:1.5.0'

    implementation 'tech.relaycorp:doh:1.0.70'

    debugApi(name: 'cronet-debug', ext: 'aar')
    // releaseApi(name: 'cronet-release', ext: 'aar')
    debugApi(name: 'IEnvoyProxy', ext: 'aar')
    releaseApi(name: 'IEnvoyProxy', ext: 'aar')
    // debugApi(name: 'plenipotentiary', ext: 'aar')
    // releaseApi(name: 'plenipotentiary', ext: 'aar')
    // debugApi(name: 'Emissary', ext: 'aar')
    // releaseApi(name: 'Emissary', ext: 'aar')
}

def stdout = new ByteArrayOutputStream()
exec {
    commandLine 'git', 'describe', '--tags', '--always'
    standardOutput = stdout
}
version = stdout.toString().trim()
group = 'org.greatfire'

tasks.register('sourcesZip') {
    def src = 'https://github.com/greatfire/envoy/archive/refs/tags/' + project.version + '.zip'
    def destdir = project.getBuildDir().toString() + "/outputs/aar"
    def destfile = "$destdir/envoy-" + project.version + "-sources.zip"
    doLast {
        def url = new URL(src)
        def f = new File(destfile)
        if (f.exists()) {
            println "file $destfile already exists, skipping download"
        } else {
            mkdir "$destdir"
            println "Downloading $destfile from $url..."
            url.withInputStream { i -> f.withOutputStream { it << i } }
        }
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'Envoy'
                packaging = 'aar'
                artifactId = 'envoy'
                inceptionYear = '2018'
                url = 'https://github.com/greatfire/envoy'
                description = 'C and Java Library derived from Chromium cronet'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'https://github.com/greatfire/envoy/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                    license {
                        name = 'BSD-3-clause'
                        url = 'https://chromium.googlesource.com/chromium/src/+/refs/heads/main/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'greatfire'
                        name = 'GreatFire'
                        email = 'support@greatfire.org'
                    }
                    developer {
                        id = 'guardianproject'
                        name = 'Guardian Project'
                        email = 'support@guardianproject.info'
                    }
                }
                issueManagement {
                    url = "https://github.com/greatfire/envoy/issues"
                    system = "GitHub"
                }
                scm {
                    connection = 'scm:git:https://github.com/greatfire/envoy.git'
                    url = 'https://github.com/greatfire/envoy'
                }
//                dependencies {
//                    dependency {
//                        groupId = 'org.greatfire.envoy'
//                        artifactId = 'cronet'
//                        version = '108.0.5359.195'
//                    }
//                    dependency {
//                        groupId = 'org.greatfire'
//                        artifactId = 'IEnvoyProxy'
//                        version = '1.5.0'
//                    }
//                }
            }
        }
    }
}
