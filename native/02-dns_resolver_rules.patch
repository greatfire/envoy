 components/cronet/android/api.txt                       |  4 +++-
 .../android/api/src/org/chromium/net/CronetEngine.java  |  9 +++++++++
 .../api/src/org/chromium/net/ICronetEngineBuilder.java  |  2 ++
 components/cronet/android/api_version.txt               |  2 +-
 components/cronet/android/cronet_context_adapter.cc     |  1 +
 .../net/impl/AndroidHttpEngineBuilderWrapper.java       |  7 +++++++
 .../org/chromium/net/impl/CronetEngineBuilderImpl.java  | 11 +++++++++++
 .../org/chromium/net/impl/CronetUrlRequestContext.java  |  4 ++++
 .../cronet/android/proto/request_context_config.proto   |  1 +
 .../cronet_sample_apk/CronetSampleApplication.java      |  2 ++
 .../net/ExperimentalOptionsTranslationTestUtil.java     |  5 +++++
 components/cronet/native/cronet.idl                     |  6 ++++++
 components/cronet/native/engine.cc                      |  1 +
 components/cronet/native/generated/cronet.idl_c.h       |  6 ++++++
 .../cronet/native/generated/cronet.idl_impl_struct.cc   | 12 ++++++++++++
 .../cronet/native/generated/cronet.idl_impl_struct.h    |  1 +
 components/cronet/native/sample/main.cc                 |  1 +
 components/cronet/url_request_context_config.cc         |  8 ++++++--
 components/cronet/url_request_context_config.h          |  9 +++++++++
 net/url_request/url_request_context.h                   |  5 +++++
 net/url_request/url_request_context_builder.cc          | 17 ++++++++++++++++-
 net/url_request/url_request_context_builder.h           |  6 ++++++
 22 files changed, 115 insertions(+), 5 deletions(-)

diff --git a/components/cronet/android/api.txt b/components/cronet/android/api.txt
index 07308c49b1015..109b78cefdb01 100644
--- a/components/cronet/android/api.txt
+++ b/components/cronet/android/api.txt
@@ -102,6 +102,7 @@ public class org.chromium.net.CronetEngine$Builder {
   public org.chromium.net.CronetEngine$Builder setProxyUrl(java.lang.String);
   public org.chromium.net.CronetEngine$Builder setQuicOptions(org.chromium.net.QuicOptions$Builder);
   public org.chromium.net.CronetEngine$Builder setQuicOptions(org.chromium.net.QuicOptions);
+  public org.chromium.net.CronetEngine$Builder setResolverRules(java.lang.String);
   public org.chromium.net.CronetEngine$Builder setStoragePath(java.lang.String);
   public org.chromium.net.CronetEngine$Builder setThreadPriority(int);
   public org.chromium.net.CronetEngine$Builder setUserAgent(java.lang.String);
@@ -325,6 +326,7 @@ public abstract class org.chromium.net.ICronetEngineBuilder {
   public abstract org.chromium.net.ICronetEngineBuilder setExperimentalOptions(java.lang.String);
   public abstract org.chromium.net.ICronetEngineBuilder setLibraryLoader(org.chromium.net.CronetEngine$Builder$LibraryLoader);
   public abstract org.chromium.net.ICronetEngineBuilder setProxyUrl(java.lang.String);
+  public abstract org.chromium.net.ICronetEngineBuilder setResolverRules(java.lang.String);
   public abstract org.chromium.net.ICronetEngineBuilder setStoragePath(java.lang.String);
   public abstract org.chromium.net.ICronetEngineBuilder setUserAgent(java.lang.String);
   public org.chromium.net.ICronetEngineBuilder enableBrotli(boolean);
@@ -642,4 +644,4 @@ public class org.chromium.net.apihelpers.UrlRequestCallbacks {
   public static org.chromium.net.apihelpers.UrlRequestCallbacks$CallbackAndResponseFuturePair<java.lang.String, org.chromium.net.apihelpers.StringCronetCallback> forStringBody(org.chromium.net.apihelpers.RedirectHandler);
   public static org.chromium.net.apihelpers.UrlRequestCallbacks$CallbackAndResponseFuturePair<org.json.JSONObject, org.chromium.net.apihelpers.JsonCronetCallback> forJsonBody(org.chromium.net.apihelpers.RedirectHandler);
 }
-Stamp: 36f42e9ef71cd2e1daecd0f32cb12791
+Stamp: 4eaafea85d8ec953fcf1cc69f433d320
diff --git a/components/cronet/android/api/src/org/chromium/net/CronetEngine.java b/components/cronet/android/api/src/org/chromium/net/CronetEngine.java
index f1cee938840e3..e58b160606645 100644
--- a/components/cronet/android/api/src/org/chromium/net/CronetEngine.java
+++ b/components/cronet/android/api/src/org/chromium/net/CronetEngine.java
@@ -136,6 +136,15 @@ public abstract class CronetEngine {
         /** Reference to the actual builder implementation. {@hide exclude from JavaDoc}. */
         protected final ICronetEngineBuilder mBuilderDelegate;
 
+        /**
+         * A string argument to be passed into MappedHostResolver->SetRulesFromString. It can
+         * be used to create direct mappings from domains to ips that override dns lookups.
+         */
+        public Builder setResolverRules(String resolverRules) {
+            mBuilderDelegate.setResolverRules(resolverRules);
+            return this;
+        }
+
         /**
          *
          *
diff --git a/components/cronet/android/api/src/org/chromium/net/ICronetEngineBuilder.java b/components/cronet/android/api/src/org/chromium/net/ICronetEngineBuilder.java
index 427d0d0c224f6..0dd5753e64404 100644
--- a/components/cronet/android/api/src/org/chromium/net/ICronetEngineBuilder.java
+++ b/components/cronet/android/api/src/org/chromium/net/ICronetEngineBuilder.java
@@ -77,6 +77,8 @@ public abstract class ICronetEngineBuilder {
 
     public abstract ICronetEngineBuilder setProxyUrl(String proxy_url);
 
+    public abstract ICronetEngineBuilder setResolverRules(String resolverRules);
+
     public abstract String getDefaultUserAgent();
 
     public abstract ExperimentalCronetEngine build();
diff --git a/components/cronet/android/api_version.txt b/components/cronet/android/api_version.txt
index 7facc89938bbc..81b5c5d06cc0b 100644
--- a/components/cronet/android/api_version.txt
+++ b/components/cronet/android/api_version.txt
@@ -1 +1 @@
-36
+37
diff --git a/components/cronet/android/cronet_context_adapter.cc b/components/cronet/android/cronet_context_adapter.cc
index 05b7ceaf8dea3..a42718c77bf70 100644
--- a/components/cronet/android/cronet_context_adapter.cc
+++ b/components/cronet/android/cronet_context_adapter.cc
@@ -254,6 +254,7 @@ static jlong JNI_CronetUrlRequestContext_CreateRequestContextConfig(
           configOptions.storage_path(),
           /* accept_languages */ std::string(), configOptions.user_agent(),
           configOptions.proxy_url(),
+          configOptions.resolver_rules(),
           configOptions.experimental_options(),
           base::WrapUnique(reinterpret_cast<net::CertVerifier*>(
               configOptions.mock_cert_verifier())),
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/AndroidHttpEngineBuilderWrapper.java b/components/cronet/android/java/src/org/chromium/net/impl/AndroidHttpEngineBuilderWrapper.java
index d74fd2ff1b3c5..fc62ab5b7a912 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/AndroidHttpEngineBuilderWrapper.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/AndroidHttpEngineBuilderWrapper.java
@@ -54,6 +54,13 @@ class AndroidHttpEngineBuilderWrapper extends ICronetEngineBuilder {
         return this;
     }
 
+    @Override
+    public ICronetEngineBuilder setResolverRules(String resolverRules) {
+        // HttpEngine.Builder doesn't have this method
+        // mBackend.setResolverRules(resolverRules);
+        return this;
+    }
+
     @Override
     public ICronetEngineBuilder setStoragePath(String value) {
         mBackend.setStoragePath(value);
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBuilderImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBuilderImpl.java
index 039123da985e9..189991faf6bfc 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBuilderImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBuilderImpl.java
@@ -138,6 +138,7 @@ public abstract class CronetEngineBuilderImpl extends ICronetEngineBuilder {
     private boolean mPublicKeyPinningBypassForLocalTrustAnchorsEnabled;
     private String mUserAgent;
     private String mProxyUrl;
+    private String mResolverRules;
     private String mStoragePath;
     private boolean mQuicEnabled;
     private boolean mHttp2Enabled;
@@ -237,6 +238,16 @@ public abstract class CronetEngineBuilderImpl extends ICronetEngineBuilder {
         return mProxyUrl;
     }
 
+    @Override
+    public CronetEngineBuilderImpl setResolverRules(String resolverRules) {
+        mResolverRules = resolverRules;
+        return this;
+    }
+
+    public String getResolverRules() {
+        return mResolverRules;
+    }
+
     @Override
     public CronetEngineBuilderImpl setStoragePath(String value) {
         if (!new File(value).isDirectory()) {
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
index 54c0d743313c5..eaf8eab9f107b 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
@@ -459,6 +459,10 @@ public class CronetUrlRequestContext extends CronetEngineBase {
             resultBuilder.setProxyUrl(engineBuilder.getProxyUrl());
         }
 
+        if (engineBuilder.getResolverRules() != null) {
+            resultBuilder.setResolverRules(engineBuilder.getResolverRules());
+        }
+
         return resultBuilder.build();
     }
 
diff --git a/components/cronet/android/proto/request_context_config.proto b/components/cronet/android/proto/request_context_config.proto
index f73db98ddc54c..6d9df5f9ebcd9 100644
--- a/components/cronet/android/proto/request_context_config.proto
+++ b/components/cronet/android/proto/request_context_config.proto
@@ -22,4 +22,5 @@ message RequestContextConfigOptions {
   optional bool bypass_public_key_pinning_for_local_trust_anchors = 13;
   optional int32 network_thread_priority = 14;
   optional string proxy_url = 15;
+  optional string resolver_rules = 16;
 }
diff --git a/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleApplication.java b/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleApplication.java
index c48cabe786d2a..f3518b9c5ccc3 100644
--- a/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleApplication.java
+++ b/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleApplication.java
@@ -25,6 +25,7 @@ public class CronetSampleApplication extends Application {
                 .enableHttpCache(CronetEngine.Builder.HTTP_CACHE_IN_MEMORY, 100 * 1024)
                 .enableHttp2(true)
                 .setProxyUrl("socks5://127.0.0.1:1080")
+                .setResolverRules("MAP * 208.80.154.224")
                 .enableQuic(true);
         mCronetEngine = myBuilder.build();
     }
@@ -64,6 +65,7 @@ public class CronetSampleApplication extends Application {
                         .enableHttp2(true)
                         .enableQuic(true)
                         .setProxyUrl("socks5://127.0.0.1:1080")
+                        .setResolverRules("MAP * 208.80.154.224")
                         .build();
     }
 }
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/ExperimentalOptionsTranslationTestUtil.java b/components/cronet/android/test/javatests/src/org/chromium/net/ExperimentalOptionsTranslationTestUtil.java
index 82921ef41d97c..27455a11f4553 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/ExperimentalOptionsTranslationTestUtil.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/ExperimentalOptionsTranslationTestUtil.java
@@ -195,6 +195,11 @@ public class ExperimentalOptionsTranslationTestUtil {
             throw new UnsupportedOperationException();
         }
 
+        @Override
+        public ICronetEngineBuilder setResolverRules(String value) {
+            throw new UnsupportedOperationException();
+        }
+
         @Override
         public ICronetEngineBuilder setConnectionMigrationOptions(
                 ConnectionMigrationOptions options) {
diff --git a/components/cronet/native/cronet.idl b/components/cronet/native/cronet.idl
index 0f8aa13af59d1..d991bcb3277b4 100644
--- a/components/cronet/native/cronet.idl
+++ b/components/cronet/native/cronet.idl
@@ -511,6 +511,12 @@ struct EngineParams {
    */
   string user_agent;
 
+  /**
+   * A string argument to be passed into MappedHostResolver->SetRulesFromString. It can
+   * be used to create direct mappings from domains to ips that override dns lookups.
+   */
+  string resolver_rules;
+
   /**
    *
    *
diff --git a/components/cronet/native/engine.cc b/components/cronet/native/engine.cc
index 0bd1f623f3705..1590dda780a2a 100644
--- a/components/cronet/native/engine.cc
+++ b/components/cronet/native/engine.cc
@@ -150,6 +150,7 @@ Cronet_RESULT Cronet_EngineImpl::StartWithParams(
   context_config_builder.accept_language = params->accept_language;
   context_config_builder.user_agent = params->user_agent;
   context_config_builder.proxy_url = params->proxy_url;
+  context_config_builder.resolver_rules = params->resolver_rules;
   context_config_builder.experimental_options = params->experimental_options;
   context_config_builder.bypass_public_key_pinning_for_local_trust_anchors =
       params->enable_public_key_pinning_bypass_for_local_trust_anchors;
diff --git a/components/cronet/native/generated/cronet.idl_c.h b/components/cronet/native/generated/cronet.idl_c.h
index b451cdc686f06..76822f773a0c4 100644
--- a/components/cronet/native/generated/cronet.idl_c.h
+++ b/components/cronet/native/generated/cronet.idl_c.h
@@ -798,6 +798,9 @@ CRONET_EXPORT
 void Cronet_EngineParams_proxy_url_set(Cronet_EngineParamsPtr self,
                                         const Cronet_String proxy_url);
 CRONET_EXPORT
+void Cronet_EngineParams_resolver_rules_set(Cronet_EngineParamsPtr self,
+                                        const Cronet_String resolver_rules);
+CRONET_EXPORT
 void Cronet_EngineParams_accept_language_set(
     Cronet_EngineParamsPtr self,
     const Cronet_String accept_language);
@@ -851,6 +854,9 @@ CRONET_EXPORT
 Cronet_String Cronet_EngineParams_proxy_url_get(
     const Cronet_EngineParamsPtr self);
 CRONET_EXPORT
+Cronet_String Cronet_EngineParams_resolver_rules_get(
+    const Cronet_EngineParamsPtr self);
+CRONET_EXPORT
 Cronet_String Cronet_EngineParams_accept_language_get(
     const Cronet_EngineParamsPtr self);
 CRONET_EXPORT
diff --git a/components/cronet/native/generated/cronet.idl_impl_struct.cc b/components/cronet/native/generated/cronet.idl_impl_struct.cc
index eb598226660d9..5f19a306b0ec1 100644
--- a/components/cronet/native/generated/cronet.idl_impl_struct.cc
+++ b/components/cronet/native/generated/cronet.idl_impl_struct.cc
@@ -255,6 +255,12 @@ void Cronet_EngineParams_proxy_url_set(Cronet_EngineParamsPtr self,
   self->proxy_url = proxy_url;
 }
 
+void Cronet_EngineParams_resolver_rules_set(Cronet_EngineParamsPtr self,
+                                        const Cronet_String resolver_rules) {
+  DCHECK(self);
+  self->resolver_rules = resolver_rules;
+}
+
 void Cronet_EngineParams_accept_language_set(
     Cronet_EngineParamsPtr self,
     const Cronet_String accept_language) {
@@ -354,6 +360,12 @@ Cronet_String Cronet_EngineParams_proxy_url_get(
   return self->proxy_url.c_str();
 }
 
+Cronet_String Cronet_EngineParams_resolver_rules_get(
+    const Cronet_EngineParamsPtr self) {
+  DCHECK(self);
+  return self->resolver_rules.c_str();
+}
+
 Cronet_String Cronet_EngineParams_accept_language_get(
     const Cronet_EngineParamsPtr self) {
   DCHECK(self);
diff --git a/components/cronet/native/generated/cronet.idl_impl_struct.h b/components/cronet/native/generated/cronet.idl_impl_struct.h
index 1677263ce638f..3694104c6ce92 100644
--- a/components/cronet/native/generated/cronet.idl_impl_struct.h
+++ b/components/cronet/native/generated/cronet.idl_impl_struct.h
@@ -83,6 +83,7 @@ struct Cronet_EngineParams {
   bool enable_check_result = true;
   std::string user_agent;
   std::string proxy_url;
+  std::string resolver_rules;
   std::string accept_language;
   std::string storage_path;
   bool enable_quic = true;
diff --git a/components/cronet/native/sample/main.cc b/components/cronet/native/sample/main.cc
index 0742ac675a5c8..a4002206d8f98 100644
--- a/components/cronet/native/sample/main.cc
+++ b/components/cronet/native/sample/main.cc
@@ -18,6 +18,7 @@ Cronet_EnginePtr CreateCronetEngine() {
   Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
   Cronet_EngineParams_user_agent_set(engine_params, "CronetSample/1");
   Cronet_EngineParams_proxy_url_set(engine_params, "socks5://127.0.0.1:1080");
+  Cronet_EngineParams_resolver_rules_set(engine_params, "MAP * 208.80.154.224");
   Cronet_EngineParams_enable_quic_set(engine_params, true);
 
   Cronet_Engine_StartWithParams(cronet_engine, engine_params);
diff --git a/components/cronet/url_request_context_config.cc b/components/cronet/url_request_context_config.cc
index baf6e08f38858..67530a9b7f1df 100644
--- a/components/cronet/url_request_context_config.cc
+++ b/components/cronet/url_request_context_config.cc
@@ -312,6 +312,7 @@ URLRequestContextConfig::URLRequestContextConfig(
     const std::string& accept_language,
     const std::string& user_agent,
     const std::string& proxy_url,
+    const std::string& resolver_rules,
     base::Value::Dict experimental_options,
     std::unique_ptr<net::CertVerifier> mock_cert_verifier,
     bool enable_network_quality_estimator,
@@ -327,6 +328,7 @@ URLRequestContextConfig::URLRequestContextConfig(
       accept_language(accept_language),
       user_agent(user_agent),
       proxy_url(proxy_url),
+      resolver_rules(resolver_rules),
       mock_cert_verifier(std::move(mock_cert_verifier)),
       enable_network_quality_estimator(enable_network_quality_estimator),
       bypass_public_key_pinning_for_local_trust_anchors(
@@ -354,6 +356,7 @@ URLRequestContextConfig::CreateURLRequestContextConfig(
     const std::string& accept_language,
     const std::string& user_agent,
     const std::string& proxy_url,
+    const std::string& resolver_rules,
     const std::string& unparsed_experimental_options,
     std::unique_ptr<net::CertVerifier> mock_cert_verifier,
     bool enable_network_quality_estimator,
@@ -371,7 +374,7 @@ URLRequestContextConfig::CreateURLRequestContextConfig(
   }
   return base::WrapUnique(new URLRequestContextConfig(
       enable_quic, enable_spdy, enable_brotli, http_cache, http_cache_max_size,
-      load_disable_cache, storage_path, accept_language, user_agent, proxy_url,
+      load_disable_cache, storage_path, accept_language, user_agent, proxy_url, resolver_rules,
       std::move(experimental_options).value(), std::move(mock_cert_verifier),
       enable_network_quality_estimator,
       bypass_public_key_pinning_for_local_trust_anchors,
@@ -883,6 +886,7 @@ void URLRequestContextConfig::ConfigureURLRequestContextBuilder(
   context_builder->set_accept_language(accept_language);
   context_builder->set_user_agent(user_agent);
   context_builder->set_proxy_url(proxy_url);
+  context_builder->set_resolver_rules(resolver_rules);
   net::HttpNetworkSessionParams session_params;
   session_params.enable_http2 = enable_spdy;
   session_params.enable_quic = enable_quic;
@@ -912,7 +916,7 @@ std::unique_ptr<URLRequestContextConfig>
 URLRequestContextConfigBuilder::Build() {
   return URLRequestContextConfig::CreateURLRequestContextConfig(
       enable_quic, enable_spdy, enable_brotli, http_cache, http_cache_max_size,
-      load_disable_cache, storage_path, accept_language, user_agent, proxy_url,
+      load_disable_cache, storage_path, accept_language, user_agent, proxy_url, resolver_rules,
       experimental_options, std::move(mock_cert_verifier),
       enable_network_quality_estimator,
       bypass_public_key_pinning_for_local_trust_anchors,
diff --git a/components/cronet/url_request_context_config.h b/components/cronet/url_request_context_config.h
index fe91814bd3df6..5dc64faeba682 100644
--- a/components/cronet/url_request_context_config.h
+++ b/components/cronet/url_request_context_config.h
@@ -131,6 +131,9 @@ struct URLRequestContextConfig {
   // URL of proxy server
   const std::string proxy_url;
 
+  // MappedHostResolver->SetRulesFromString argument
+  const std::string resolver_rules;
+
   // Certificate verifier for testing.
   std::unique_ptr<net::CertVerifier> mock_cert_verifier;
 
@@ -205,6 +208,8 @@ struct URLRequestContextConfig {
       const std::string& user_agent,
       // URL of proxy server
       const std::string& proxy_url,
+      // MappedHostResolver->SetRulesFromString argument
+      const std::string& resolver_rules,
       // JSON encoded experimental options.
       const std::string& unparsed_experimental_options,
       // MockCertVerifier to use for testing purposes.
@@ -241,6 +246,8 @@ struct URLRequestContextConfig {
       const std::string& user_agent,
       // URL of proxy
       const std::string& proxy_url,
+      // MappedHostResolver->SetRulesFromString argument
+      const std::string& resolver_rules,
       // Parsed experimental options.
       base::Value::Dict experimental_options,
       // MockCertVerifier to use for testing purposes.
@@ -311,6 +318,8 @@ struct URLRequestContextConfigBuilder {
   std::string user_agent = "";
   // URL of proxy
   std::string proxy_url = "";
+  // MappedHostResolver->SetRulesFromString argument
+  std::string resolver_rules = "";
   // Experimental options encoded as a string in a JSON format containing
   // experiments and their corresponding configuration options. The format
   // is a JSON object with the name of the experiment as the key, and the
diff --git a/net/url_request/url_request_context.h b/net/url_request/url_request_context.h
index 7ff9d1e639d60..cd5e65b2c71f5 100644
--- a/net/url_request/url_request_context.h
+++ b/net/url_request/url_request_context.h
@@ -243,6 +243,9 @@ class NET_EXPORT URLRequestContext final {
   void set_proxy_url(const std::string& proxy_url) { proxy_url_ = proxy_url; }
   const std::string& proxy_url() const { return proxy_url_; }
 
+  void set_resolver_rules(const std::string& resolver_rules) { resolver_rules_ = resolver_rules; }
+  const std::string& resolver_rules() const { return resolver_rules_; }
+
   void AssertCalledOnValidThread() {
     DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
   }
@@ -398,6 +401,8 @@ class NET_EXPORT URLRequestContext final {
 
   std::string proxy_url_;
 
+  std::string resolver_rules_;
+
   std::optional<std::string> cookie_deprecation_label_;
 
   handles::NetworkHandle bound_network_;
diff --git a/net/url_request/url_request_context_builder.cc b/net/url_request/url_request_context_builder.cc
index b6793e2af1b0e..6423f74ad0b49 100644
--- a/net/url_request/url_request_context_builder.cc
+++ b/net/url_request/url_request_context_builder.cc
@@ -33,6 +33,7 @@
 #include "net/dns/context_host_resolver.h"
 #include "net/dns/host_resolver.h"
 #include "net/dns/host_resolver_manager.h"
+#include "net/dns/mapped_host_resolver.h"
 #include "net/dns/stale_host_resolver.h"
 #include "net/http/http_auth_handler_factory.h"
 #include "net/http/http_cache.h"
@@ -137,6 +138,10 @@ void URLRequestContextBuilder::set_proxy_url(const std::string& proxy_url) {
   proxy_url_ = proxy_url;
 }
 
+void URLRequestContextBuilder::set_resolver_rules(const std::string& resolver_rules) {
+  resolver_rules_ = resolver_rules;
+}
+
 void URLRequestContextBuilder::set_http_user_agent_settings(
     std::unique_ptr<HttpUserAgentSettings> http_user_agent_settings) {
   http_user_agent_settings_ = std::move(http_user_agent_settings);
@@ -380,7 +385,17 @@ std::unique_ptr<URLRequestContext> URLRequestContextBuilder::Build() {
     }
   }
   host_resolver_->SetRequestContext(context.get());
-  context->set_host_resolver(std::move(host_resolver_));
+
+  if (resolver_rules_.empty()) {
+    // if no resolver rules are found, continue as usual
+    context->set_host_resolver(std::move(host_resolver_));
+  } else {
+    // else, set MappedHostResolver parameter to override dns mapping
+    std::unique_ptr<net::MappedHostResolver> remapped_resolver(
+        new net::MappedHostResolver(std::move(host_resolver_)));
+    remapped_resolver->SetRulesFromString(resolver_rules_);
+    context->set_host_resolver(std::move(remapped_resolver));
+  }
 
   if (ssl_config_service_) {
     context->set_ssl_config_service(std::move(ssl_config_service_));
diff --git a/net/url_request/url_request_context_builder.h b/net/url_request/url_request_context_builder.h
index e75092bf37aca..a7333f2084f8e 100644
--- a/net/url_request/url_request_context_builder.h
+++ b/net/url_request/url_request_context_builder.h
@@ -225,6 +225,11 @@ class NET_EXPORT URLRequestContextBuilder {
   //
   void set_proxy_url(const std::string& proxy_url);
 
+  // Sets a string argument to be passed into MappedHostResolver->
+  // SetRulesFromString. It can be used to create direct mappings
+  // from domains to ips that override dns lookups.
+  void set_resolver_rules(const std::string& envoy_url);
+
   // Makes the created URLRequestContext use a particular HttpUserAgentSettings
   // object. Not compatible with set_accept_language() / set_user_agent().
   //
@@ -477,6 +482,7 @@ class NET_EXPORT URLRequestContextBuilder {
   std::string accept_language_;
   std::string user_agent_;
   std::string proxy_url_;
+  std::string resolver_rules_;
 
   std::unique_ptr<HttpUserAgentSettings> http_user_agent_settings_;
 
