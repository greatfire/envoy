 components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleApplication.java |  2 ++
 components/cronet/native/sample/main.cc                                                          |  1 +
 components/cronet/url_request_context_config.cc                                                  | 12 ++++++++++++
 net/url_request/url_request_context_builder.cc                                                   | 17 ++++++++++++++++-
 net/url_request/url_request_context_builder.h                                                    |  7 +++++++
 5 files changed, 38 insertions(+), 1 deletion(-)

diff --git a/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleApplication.java b/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleApplication.java
index 87436d5a2d90c..bc714727729cc 100644
--- a/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleApplication.java
+++ b/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleApplication.java
@@ -24,6 +24,7 @@ public class CronetSampleApplication extends Application {
         myBuilder
                 .enableHttpCache(CronetEngine.Builder.HTTP_CACHE_IN_MEMORY, 100 * 1024)
                 .enableHttp2(true)
+                .setExperimentalOptions("{\"resolver_rules\": \"MAP * 65.21.79.229, EXCLUDE *.google.*\"}")
                 .enableQuic(true);
         mCronetEngine = myBuilder.build();
     }
@@ -62,6 +63,7 @@ public class CronetSampleApplication extends Application {
                         .enableHttpCache(CronetEngine.Builder.HTTP_CACHE_IN_MEMORY, 100 * 1024)
                         .enableHttp2(true)
                         .enableQuic(true)
+                        .setExperimentalOptions("{\"resolver_rules\": \"MAP * 65.21.79.229, EXCLUDE *.google.*\"}")
                         .build();
     }
 }
diff --git a/components/cronet/native/sample/main.cc b/components/cronet/native/sample/main.cc
index fe9ff6f1ee279..25503195fe04c 100644
--- a/components/cronet/native/sample/main.cc
+++ b/components/cronet/native/sample/main.cc
@@ -17,6 +17,7 @@ Cronet_EnginePtr CreateCronetEngine() {
   Cronet_EnginePtr cronet_engine = Cronet_Engine_Create();
   Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
   Cronet_EngineParams_user_agent_set(engine_params, "CronetSample/1");
+  Cronet_EngineParams_experimental_options_set(engine_params, "{\"resolver_rules\": \"MAP * 65.21.79.229, EXCLUDE *.google.*\"}");
   Cronet_EngineParams_enable_quic_set(engine_params, true);
 
   Cronet_Engine_StartWithParams(cronet_engine, engine_params);
diff --git a/components/cronet/url_request_context_config.cc b/components/cronet/url_request_context_config.cc
index 8da024badd93a..33b2c57f02391 100644
--- a/components/cronet/url_request_context_config.cc
+++ b/components/cronet/url_request_context_config.cc
@@ -211,6 +211,9 @@ const char kDisableTlsZeroRtt[] = "disable_tls_zero_rtt";
 // underlying OS.
 const char kSpdyGoAwayOnIpChange[] = "spdy_go_away_on_ip_change";
 
+// DNS options
+const char kResolverRules[] = "resolver_rules";
+
 // Whether the connection status of all bidirectional streams (created through
 // the Cronet engine) should be monitored.
 // The value must be an integer (> 0) and will be interpreted as a suggestion
@@ -765,6 +768,15 @@ void URLRequestContextConfig::SetContextBuilderExperimentalOptions(
         continue;
       }
       session_params->spdy_go_away_on_ip_change = iter->second.GetBool();
+    } else if (iter->first == kResolverRules) {
+      if (!iter->second.is_string()) {
+        LOG(ERROR) << "\"" << iter->first << "\" config params \""
+                   << iter->second << "\" is not a string";
+        effective_experimental_options.Remove(iter->first);
+        continue;
+      }
+      std::string temp_resolver_rules = iter->second.GetString();
+      context_builder->set_resolver_rules(temp_resolver_rules);
     } else {
       LOG(WARNING) << "Unrecognized Cronet experimental option \""
                    << iter->first << "\" with params \"" << iter->second;
diff --git a/net/url_request/url_request_context_builder.cc b/net/url_request/url_request_context_builder.cc
index 4ac56ba26747c..98864c9c04ddd 100644
--- a/net/url_request/url_request_context_builder.cc
+++ b/net/url_request/url_request_context_builder.cc
@@ -34,6 +34,7 @@
 #include "net/dns/host_resolver.h"
 #include "net/dns/host_resolver_manager.h"
 #include "net/dns/stale_host_resolver.h"
+#include "net/dns/mapped_host_resolver.h"
 #include "net/http/http_auth_handler_factory.h"
 #include "net/http/http_cache.h"
 #include "net/http/http_network_layer.h"
@@ -133,6 +134,10 @@ void URLRequestContextBuilder::set_user_agent(const std::string& user_agent) {
   user_agent_ = user_agent;
 }
 
+void URLRequestContextBuilder::set_resolver_rules(const std::string& resolver_rules) {
+  resolver_rules_ = resolver_rules;
+}
+
 void URLRequestContextBuilder::set_http_user_agent_settings(
     std::unique_ptr<HttpUserAgentSettings> http_user_agent_settings) {
   http_user_agent_settings_ = std::move(http_user_agent_settings);
@@ -376,7 +381,17 @@ std::unique_ptr<URLRequestContext> URLRequestContextBuilder::Build() {
     }
   }
   host_resolver_->SetRequestContext(context.get());
-  context->set_host_resolver(std::move(host_resolver_));
+
+  if (resolver_rules_.empty()) {
+    // if no resolver rules are found, continue as usual
+    context->set_host_resolver(std::move(host_resolver_));
+  } else {
+    // else, set MappedHostResolver parameter to override dns mapping
+    std::unique_ptr<net::MappedHostResolver> remapped_resolver(
+        new net::MappedHostResolver(std::move(host_resolver_)));
+    remapped_resolver->SetRulesFromString(resolver_rules_);
+    context->set_host_resolver(std::move(remapped_resolver));
+  }
 
   if (ssl_config_service_) {
     context->set_ssl_config_service(std::move(ssl_config_service_));
diff --git a/net/url_request/url_request_context_builder.h b/net/url_request/url_request_context_builder.h
index 7a9022b3d789c..87c8be12eb921 100644
--- a/net/url_request/url_request_context_builder.h
+++ b/net/url_request/url_request_context_builder.h
@@ -220,6 +220,11 @@ class NET_EXPORT URLRequestContextBuilder {
   void set_accept_language(const std::string& accept_language);
   void set_user_agent(const std::string& user_agent);
 
+  // Sets a string argument to be passed into MappedHostResolver->
+  // SetRulesFromString. It can be used to create direct mappings
+  // from domains to ips that override dns lookups.
+  void set_resolver_rules(const std::string& envoy_url);
+
   // Makes the created URLRequestContext use a particular HttpUserAgentSettings
   // object. Not compatible with set_accept_language() / set_user_agent().
   //
@@ -471,6 +476,8 @@ class NET_EXPORT URLRequestContextBuilder {
 
   std::string accept_language_;
   std::string user_agent_;
+  std::string resolver_rules_;
+
   std::unique_ptr<HttpUserAgentSettings> http_user_agent_settings_;
 
   std::optional<std::string> cookie_deprecation_label_;
